# install.packages("keras")
# install.packages("tensorflow")
# tensorflow::install_tensorflow()
library(tidyverse)
library(keras)
source('helper.R')

# Get data -------

# download datasets
mnist <- dataset_mnist()

# assign 
c(img_train, digit_train) %<-% mnist$train
c(img_test, digit_test)  %<-% mnist$test

# Plot digit -------

plt_imgs(img_train[1:25,,], digit_train[1:25])

# Preprocess data -------

# reshape & rescale images
x_train <- array_reshape(img_train, c(nrow(img_train), 784))
x_test <- array_reshape(img_test, c(nrow(img_test), 784))
x_train <- x_train / 255
x_test <- x_test / 255

# expand criterion
y_train <- to_categorical(digit_train, 10)
y_test <- to_categorical(digit_test, 10)


# Setup network -------

# layers
model <- keras_model_sequential() 
model %>% 
  layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>% 
  layer_dropout(rate = 0.4) %>% 
  layer_dense(units = 128, activation = 'relu') %>%
  layer_dropout(rate = 0.3) %>%
  layer_dense(units = 10, activation = 'softmax')

# loss, optimizers, & metrics
model %>% compile(
  loss = 'categorical_crossentropy',
  optimizer = optimizer_rmsprop(),
  metrics = c('accuracy')
  )


# Fit network -------

history <- model %>% fit(
  x_train, y_train, 
  epochs = 10, batch_size = 128, 
  validation_split = 0.2
  )

plot(history)

# evaluate weights
weights = get_weights(model)
str(a)
a[[4]]

# Evaluate pred -------

# overall performance
model %>% evaluate(x_test, y_test)

# predictions 
pred = model %>% predict_classes(x_test)
table(digit_test, pred)

# incorrect 
i = 1:64
plt_imgs(img_test[i,,], pred[i], digit_test[i])
      

